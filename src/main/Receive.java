/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.*;
import java.awt.event.*;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kulakesh
 */
public class Receive extends javax.swing.JInternalFrame {

    String listItem[][];
    String listReceive[][];

    public Receive() {
        initComponents();
        ini();
        addEventToObject();
        btnNewActionPerformed(null);
    }

    private void ini() {
        try {
            javax.swing.text.MaskFormatter dateMask1 = new javax.swing.text.MaskFormatter("##-##-####");
            dateMask1.install(txtDate);
            javax.swing.text.MaskFormatter dateMask = new javax.swing.text.MaskFormatter("##-##-####");

            dateMask.install(txtInvoiceDate);
        } catch (ParseException e1) {
        }
        jLabel15.setVisible(false);
        txtItemID.setVisible(false);
        new config.functions().numOnly(txtQnty);
        new config.functions().numOnly(txtGood);
        new config.functions().numOnly(txtBad);

    }

    private void loadListArrays() {
        Integer j = 0;
        try {
            j = 0;
            ResultSet rs1 = new config.RecordSet().Open("SELECT id,sap_code,name FROM items WHERE del=0 ORDER BY name");
            if (rs1.next()) {
                rs1.last();
                listItem = new String[rs1.getRow()][3];
                rs1.beforeFirst();
                while (rs1.next()) {
                    listItem[j][0] = rs1.getString("id");
                    listItem[j][1] = rs1.getString("sap_code");
                    listItem[j][2] = rs1.getString("name");
                    j++;
                }
            }
            rs1.close();
            j = 0;
            rs1 = new config.RecordSet().Open("SELECT id,invoice_no,rdate FROM stock WHERE del=0 ORDER BY invoice_no");
            if (rs1.next()) {
                rs1.last();
                listReceive = new String[rs1.getRow()][3];
                rs1.beforeFirst();
                while (rs1.next()) {
                    listReceive[j][0] = rs1.getString("id");
                    listReceive[j][1] = rs1.getString("invoice_no");
                    listReceive[j][2] = rs1.getString("rdate");
                    j++;
                }
            }
            rs1.close();

        } catch (Exception e) {
            System.out.println("item>loadListArrays :" + e);
        }
        //System.out.println(Arrays.deepToString(listCategory));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        txtIDNo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtInvoiceNo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtInvoiceAmount = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtSAPCode = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtItemName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtQnty = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtGood = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtBad = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtReck = new javax.swing.JTextField();
        btnNew = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        txtDate = new javax.swing.JFormattedTextField();
        txtInvoiceDate = new javax.swing.JFormattedTextField();
        scMain = new javax.swing.JScrollPane();
        tblMain = new javax.swing.JTable();
        scOption = new javax.swing.JScrollPane();
        tblOption = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        txtItemID = new javax.swing.JTextField();

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(152, 22, 22));
        jLabel2.setText("Receive");

        jLabel3.setText("GIN");

        txtIDNo.setEnabled(false);

        jLabel4.setText("Invoice No");

        txtInvoiceNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInvoiceNoKeyPressed(evt);
            }
        });

        jLabel5.setText("Receive Date");

        jLabel6.setText("Invoice Date");

        jLabel7.setText("Invoice Amount");

        jLabel8.setText("SAP Code");

        jLabel9.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(152, 22, 22));
        jLabel9.setText("Item Details");

        jLabel10.setText("Item Name");

        jLabel11.setText("Quantity");

        jLabel12.setText("Good");

        jLabel13.setText("Bad");

        jLabel14.setText("Reck");

        btnNew.setText("Refresh");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnDelete.setForeground(new java.awt.Color(244, 18, 45));
        btnDelete.setText("Delete");

        btnSave.setForeground(new java.awt.Color(60, 115, 44));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        tblMain.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SL", "SAP", "Name", "Qnty", "GD", "BD", "Reck", "null"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMainMouseClicked(evt);
            }
        });
        scMain.setViewportView(tblMain);
        tblMain.getColumnModel().getColumn(0).setPreferredWidth(40);
        tblMain.getColumnModel().getColumn(1).setPreferredWidth(90);
        tblMain.getColumnModel().getColumn(2).setPreferredWidth(200);
        tblMain.getColumnModel().getColumn(3).setPreferredWidth(60);
        tblMain.getColumnModel().getColumn(4).setPreferredWidth(55);
        tblMain.getColumnModel().getColumn(5).setPreferredWidth(55);
        tblMain.getColumnModel().getColumn(6).setResizable(false);
        tblMain.getColumnModel().getColumn(6).setPreferredWidth(80);
        tblMain.getColumnModel().getColumn(7).setResizable(false);
        tblMain.getColumnModel().getColumn(7).setPreferredWidth(0);

        scOption.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scOption.setToolTipText("");

        tblOption.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOption.getTableHeader().setResizingAllowed(false);
        tblOption.getTableHeader().setReorderingAllowed(false);
        scOption.setViewportView(tblOption);
        tblOption.getColumnModel().getColumn(0).setResizable(false);
        tblOption.getColumnModel().getColumn(0).setPreferredWidth(1);
        tblOption.getColumnModel().getColumn(1).setResizable(false);
        tblOption.getColumnModel().getColumn(1).setPreferredWidth(100);
        tblOption.getColumnModel().getColumn(2).setResizable(false);
        tblOption.getColumnModel().getColumn(2).setPreferredWidth(200);

        jLabel15.setText("System Code");

        txtItemID.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtIDNo)
                                    .addComponent(txtInvoiceNo)
                                    .addComponent(txtInvoiceAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtInvoiceDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addGap(123, 123, 123))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addGap(118, 118, 118)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel11)
                                                .addComponent(jLabel12)
                                                .addComponent(jLabel14))
                                            .addGap(44, 44, 44)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnNew)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnDelete)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSave)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addComponent(btnExit))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(125, 125, 125)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtQnty, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtGood, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel13)
                                        .addGap(26, 26, 26)
                                        .addComponent(txtBad, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtReck, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtSAPCode, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel15)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtItemID, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scMain, javax.swing.GroupLayout.PREFERRED_SIZE, 786, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scOption, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 737, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3)
                                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(txtInvoiceDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtIDNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtInvoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtInvoiceAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel15)
                                .addComponent(txtItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(txtSAPCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(txtQnty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtGood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(txtBad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(txtReck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNew)
                            .addComponent(btnDelete)
                            .addComponent(btnSave)
                            .addComponent(btnExit)))
                    .addComponent(scMain, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scOption, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        if (tblMain.getRowCount() > 0) {
            Object[] options = {"Yes", "No"};
            int n = JOptionPane.showOptionDialog(
                    this,
                    "You have " + tblMain.getRowCount() + " UnSaved receive, Do you want to Exit anyway ?",
                    "Warnning",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE, null, options, options[1]);
            if (n == 0) {
                dispose();
            }
        } else {
            dispose();
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        txtIDNo.setText(new config.functions().GetNextID("S", "stock", "id"));
        txtDate.setText(new SimpleDateFormat("dd-MM-yyyy").format(Calendar.getInstance().getTime()));
        txtInvoiceNo.setText("");
        txtInvoiceDate.setText("");
        txtInvoiceAmount.setText("");
        txtSAPCode.setText("");
        txtItemName.setText("");
        txtQnty.setText("");
        txtGood.setText("");
        txtBad.setText("");
        txtReck.setText("");
        btnSave.setText("Save");
        scOption.setVisible(false);
        new config.functions().ClearTable(tblMain);
        loadListArrays();
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (tblMain.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No Item found",
                    "Item Entry Warnning", JOptionPane.WARNING_MESSAGE);
            new config.functions().SelectAll(txtSAPCode);
            return;
        }

        try {
            ResultSet rs1 = new config.RecordSet().Execute("DELETE FROM stock WHERE id='" + txtIDNo.getText() + "'");
            String insStr = "INSERT INTO stock VALUES ("
                    + "'" + txtIDNo.getText() + "',"
                    + "'" + new config.functions().cSqlDate(new config.functions().cDateCalender(txtDate.getText())) + "',"
                    + "'" + txtInvoiceNo.getText() + "',"
                    + "'" + txtInvoiceDate.getText() + "',"
                    + "'" + txtInvoiceAmount.getText() + "',"
                    + "0)";
            rs1 = new config.RecordSet().Execute(insStr);
            rs1 = new config.RecordSet().Execute("DELETE FROM stock_item WHERE stock_id='" + txtIDNo.getText() + "'");
            for (int i = 0; i < tblMain.getRowCount(); i++) {
                insStr = "INSERT INTO stock_item VALUES ("
                        + "'" + txtIDNo.getText() + "',"
                        + "'" + tblMain.getValueAt(i, 7) + "',"
                        + "'" + tblMain.getValueAt(i, 3) + "',"
                        + "'" + tblMain.getValueAt(i, 4) + "',"
                        + "'" + tblMain.getValueAt(i, 5) + "',"
                        + "'" + tblMain.getValueAt(i, 6) + "',0,0)";
                rs1 = new config.RecordSet().Execute(insStr);
            }
            JOptionPane.showMessageDialog(this, "Saved",
                    "Receive Message", JOptionPane.INFORMATION_MESSAGE);
            btnNewActionPerformed(null);
        } catch (Exception e) {
            System.out.println("Receive.java-SaveData-Error:" + e);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtInvoiceNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInvoiceNoKeyPressed
        int keyCode = evt.getKeyCode();
        switch (keyCode) {
            case KeyEvent.VK_F3:
                displayOptionMenu("receive", txtInvoiceNo.getX() + txtInvoiceNo.getWidth(), txtInvoiceNo.getY());
                break;
            case KeyEvent.VK_DOWN:
                //
                break;
        }
    }//GEN-LAST:event_txtInvoiceNoKeyPressed

    private void tblMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMainMouseClicked
        String idno = tblMain.getValueAt(tblMain.getSelectedRow(), 7).toString();
        try {
            ResultSet rs1 = new config.RecordSet().Open("SELECT * FROM stock_item WHERE stock_id='" + txtIDNo.getText() + "' AND item_id='" + idno + "'");
            if (rs1.next()) {
                txtSAPCode.setText(tblMain.getValueAt(tblMain.getSelectedRow(), 1).toString());
                txtItemID.setText(tblMain.getValueAt(tblMain.getSelectedRow(), 7).toString());
                txtItemName.setText(tblMain.getValueAt(tblMain.getSelectedRow(), 2).toString());
                txtQnty.setText(rs1.getString("qnty"));
                txtGood.setText(rs1.getString("gd"));
                txtBad.setText(rs1.getString("bd"));
                txtReck.setText(rs1.getString("reck"));
                
            }
            rs1.close();
            btnSave.setText("Edit");
        } catch (Exception e) {
            System.out.println("item.java-ShowData-Error:" + e);
        }
    }//GEN-LAST:event_tblMainMouseClicked
    private void displayOptionMenu(String optField, int posX, int posY) {
        String cloneStr[][] = null;
        if (optField.equals("receive")) {
            cloneStr = listReceive.clone();
        } else if (optField.equals("item")) {
            cloneStr = listItem.clone();
        } else if (optField.equals("godown")) {
            //cloneStr = listGodown.clone();
        }
        
        new config.functions().ClearTable(tblOption);
        DefaultTableModel mdlOption = (DefaultTableModel) tblOption.getModel();
        for (String minStr[] : cloneStr) {
            mdlOption.insertRow(tblOption.getRowCount(), new Object[]{minStr[0], minStr[1], minStr[2]});
        }
        int maxOptionMenuLength = 12;
        if (cloneStr.length < maxOptionMenuLength) {
            maxOptionMenuLength = cloneStr.length;
            tblOption.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblOption.getColumnModel().getColumn(2).setPreferredWidth(197);
        } else {
            tblOption.getColumnModel().getColumn(1).setPreferredWidth(92);
            tblOption.getColumnModel().getColumn(2).setPreferredWidth(190);
        }
        scOption.setBounds(posX, posY, 300, (int) (Math.max(maxOptionMenuLength, 2) * 18f));
        scOption.setVisible(true);
    }

    private void addEventToObject() {
        final Color thisColor = new config.Global().textFocus;

        addKeyEventToObject(txtSAPCode, tblOption);
        txtSAPCode.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent arg0) {
                txtSAPCode.setBackground(thisColor);
                new config.functions().SelectAll(txtSAPCode);
                displayOptionMenu("item", txtSAPCode.getX() + txtSAPCode.getWidth(), txtSAPCode.getY());
            }

            @Override
            public void focusLost(FocusEvent arg0) {
                txtSAPCode.setBackground(new Color(255, 255, 255));
                scOption.setVisible(false);
            }
        });
        txtSAPCode.getDocument().addDocumentListener(new DocumentListener() {

            public void changedUpdate(DocumentEvent e) {
                new config.functions().SelectTableRow(tblOption, 1, txtSAPCode.getText());
            }

            public void removeUpdate(DocumentEvent e) {
                new config.functions().SelectTableRow(tblOption, 1, txtSAPCode.getText());
            }

            public void insertUpdate(DocumentEvent e) {
                new config.functions().SelectTableRow(tblOption, 1, txtSAPCode.getText());
            }
        });
        txtSAPCode.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if (tblOption.getSelectedRow() >= 0) {
                    txtItemID.setText(tblOption.getValueAt(tblOption.getSelectedRow(), 0).toString());
                    txtSAPCode.setText(tblOption.getValueAt(tblOption.getSelectedRow(), 1).toString());
                    txtItemName.setText(tblOption.getValueAt(tblOption.getSelectedRow(), 2).toString());

                    txtQnty.requestFocus();
                } else {
                    txtItemName.requestFocus();
                }

            }
        });
        txtSAPCode.addKeyListener(new KeyListener() {

            public void keyTyped(KeyEvent e) {
            }

            public void keyReleased(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                int keyCode = e.getKeyCode();
                switch (keyCode) {
                    case KeyEvent.VK_ESCAPE:
                        btnSave.requestFocus();
                        break;
                }

            }
        });

        addKeyEventToObject(txtItemName, tblOption);
        txtItemName.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent arg0) {
                txtItemName.setBackground(thisColor);
                new config.functions().SelectAll(txtItemName);
                displayOptionMenu("item", txtItemName.getX() + txtItemName.getWidth(), txtItemName.getY());
            }

            @Override
            public void focusLost(FocusEvent arg0) {
                txtItemName.setBackground(new Color(255, 255, 255));
                scOption.setVisible(false);
            }
        });
        txtItemName.getDocument().addDocumentListener(new DocumentListener() {

            public void changedUpdate(DocumentEvent e) {
                new config.functions().SelectTableRow(tblOption, 2, txtItemName.getText());
            }

            public void removeUpdate(DocumentEvent e) {
                new config.functions().SelectTableRow(tblOption, 2, txtItemName.getText());
            }

            public void insertUpdate(DocumentEvent e) {
                new config.functions().SelectTableRow(tblOption, 2, txtItemName.getText());
            }
        });
        txtItemName.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if (tblOption.getSelectedRow() >= 0) {
                    txtItemID.setText(tblOption.getValueAt(tblOption.getSelectedRow(), 0).toString());
                    txtSAPCode.setText(tblOption.getValueAt(tblOption.getSelectedRow(), 1).toString());
                    txtItemName.setText(tblOption.getValueAt(tblOption.getSelectedRow(), 2).toString());
                }
                txtQnty.requestFocus();
            }
        });
        txtItemName.addKeyListener(new KeyListener() {

            public void keyTyped(KeyEvent e) {
            }

            public void keyReleased(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                int keyCode = e.getKeyCode();
                switch (keyCode) {
                    case KeyEvent.VK_ESCAPE:
                        btnSave.requestFocus();
                        break;
                }

            }
        });

        addKeyEventToObject(txtInvoiceNo, tblOption);
        txtInvoiceNo.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent arg0) {
                txtInvoiceNo.setBackground(thisColor);
            }

            @Override
            public void focusLost(FocusEvent arg0) {
                txtInvoiceNo.setBackground(new Color(255, 255, 255));
                scOption.setVisible(false);
            }
        });
        txtInvoiceNo.getDocument().addDocumentListener(new DocumentListener() {

            public void changedUpdate(DocumentEvent e) {
                new config.functions().SelectTableRow(tblOption, 1, txtInvoiceNo.getText());
            }

            public void removeUpdate(DocumentEvent e) {
                new config.functions().SelectTableRow(tblOption, 1, txtInvoiceNo.getText());
            }

            public void insertUpdate(DocumentEvent e) {
                new config.functions().SelectTableRow(tblOption, 1, txtInvoiceNo.getText());
            }
        });
        txtInvoiceNo.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if ((tblOption.getSelectedRow() >= 0) && scOption.isVisible() == true) {
                    String id = tblOption.getValueAt(tblOption.getSelectedRow(), 0).toString();
                    try {
                        ResultSet rs1 = new config.RecordSet().Open("SELECT * FROM stock WHERE id='" + id + "'");
                        if (rs1.next()) {
                            txtIDNo.setText(rs1.getString("id"));
                            txtDate.setText(new config.functions().cSqlToDate(rs1.getString("rdate")));
                            txtInvoiceNo.setText(rs1.getString("invoice_no"));
                            txtInvoiceDate.setText(rs1.getString("invoice_date"));
                            txtInvoiceAmount.setText(rs1.getString("invoice_amount"));
                            txtDate.requestFocus();
                            new config.functions().ClearTable(tblMain);
                            ResultSet rs2 = new config.RecordSet().Open("SELECT a.*,b.sap_code,b.name FROM stock_item a,items b WHERE a.item_id=b.id AND a.stock_id='" + id + "'");
                            if (rs2.next()) {
                                rs2.beforeFirst();
                                while (rs2.next()) {
                                    DefaultTableModel mdlMain = (DefaultTableModel) tblMain.getModel();
                                    mdlMain.insertRow(tblMain.getRowCount(), new Object[]{tblMain.getRowCount() + 1,
                                                rs2.getString("sap_code"),
                                                rs2.getString("name"),
                                                rs2.getString("qnty"),
                                                rs2.getString("gd"),
                                                rs2.getString("bd"),
                                                rs2.getString("reck"),
                                                rs2.getString("item_id")});
                                }
                            }
                            rs2.close();
                        }
                        rs1.close();
                    } catch (Exception ev) {
                        System.out.println("Receive.java-SaveData-Error:" + ev);
                    }
                } else {
                    txtInvoiceDate.requestFocus();
                }

            }
        });
        txtInvoiceNo.addKeyListener(new KeyListener() {

            public void keyTyped(KeyEvent e) {
            }

            public void keyReleased(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                int keyCode = e.getKeyCode();
                switch (keyCode) {
                    case KeyEvent.VK_ESCAPE:
                        scOption.setVisible(false);
                        break;
                }

            }
        });

        // ENTER Event
        addFocusEvent(txtDate);
        txtDate.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                txtInvoiceNo.requestFocus();
            }
        });

        addFocusEvent(txtInvoiceDate);
        txtInvoiceDate.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                txtInvoiceAmount.requestFocus();
            }
        });
        addFocusEvent(txtInvoiceAmount);
        txtInvoiceAmount.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                txtSAPCode.requestFocus();
            }
        });
        addFocusEvent(txtQnty);
        txtQnty.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                txtGood.requestFocus();
                txtGood.setText(txtQnty.getText());
            }
        });
        addFocusEvent(txtGood);
        txtGood.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                txtBad.requestFocus();
                int intGood = 0, intQnty = 0;
                intQnty = Integer.parseInt((txtQnty.getText().trim().equals("") ? "0" : txtQnty.getText()));
                intGood = Integer.parseInt((txtGood.getText().trim().equals("") ? "0" : txtGood.getText()));
                txtGood.setText((intGood >= intQnty ? txtQnty.getText() : txtGood.getText()));
                intGood = Integer.parseInt((txtGood.getText().trim().equals("") ? "0" : txtGood.getText()));
                txtBad.setText(String.valueOf(intQnty - intGood));
            }
        });
        addFocusEvent(txtBad);
        txtBad.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                txtReck.requestFocus();
            }
        });
        addFocusEvent(txtReck);
        txtReck.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if (!txtItemID.getText().equals("")) {
                    //TODO
                    int rowPos = tblMain.getRowCount();
                    for (int i = 0; i < tblMain.getRowCount(); i++) {
                        if (txtItemID.getText().equals(tblMain.getValueAt(i, 7))) {
                            if(btnSave.getText().equals("Save")){
                                JOptionPane.showMessageDialog(null, "Item alrady exist",
                                        "Item Entry Warnning", JOptionPane.WARNING_MESSAGE);
                                new config.functions().SelectAll(txtItemName);
                                return;
                            }else{
                                ((DefaultTableModel) tblMain.getModel()).removeRow(i);
                                rowPos = i;
                                break;
                            }
                        }
                    }
                    DefaultTableModel mdlMain = (DefaultTableModel) tblMain.getModel();
                    mdlMain.insertRow(rowPos, new Object[]{rowPos + 1, txtSAPCode.getText(), txtItemName.getText(), txtQnty.getText(), txtGood.getText(), txtBad.getText(), txtReck.getText(), txtItemID.getText()});
                }
                txtSAPCode.setText("");
                txtItemName.setText("");
                txtQnty.setText("");
                txtGood.setText("");
                txtBad.setText("");
                txtReck.setText("");
                txtSAPCode.requestFocus();
            }
        });

    }

    private void addKeyEventToObject(Object objSource, final JTable tblTarget) {
        ((Component) objSource).addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                // TODO Auto-generated method stub
            }

            @Override
            public void keyReleased(KeyEvent e) {
                // TODO Auto-generated method stub
            }

            @Override
            public void keyPressed(KeyEvent e) {
                int keyCode = e.getKeyCode();
                switch (keyCode) {
                    case KeyEvent.VK_UP:
                        if (tblTarget.getSelectedRow() > 0) {
                            tblTarget.setRowSelectionInterval(tblTarget.getSelectedRow() - 1, tblTarget.getSelectedRow() - 1);
                            new config.functions().scrollToCenter(tblTarget, tblTarget.getSelectedRow() - 1, 1);
                        }
                        break;
                    case KeyEvent.VK_DOWN:
                        if (tblTarget.getSelectedRow() < tblTarget.getRowCount() - 1) {
                            tblTarget.setRowSelectionInterval(tblTarget.getSelectedRow() + 1, tblTarget.getSelectedRow() + 1);
                            new config.functions().scrollToCenter(tblTarget, tblTarget.getSelectedRow() + 1, 1);
                        }
                        break;
                }

            }
        });
    }

    private void addFocusEvent(final JTextField tblTarget) {
        final Color thisColor = new config.Global().textFocus;
        tblTarget.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent arg0) {
                tblTarget.setBackground(thisColor);
                new config.functions().SelectAll(tblTarget);
            }

            @Override
            public void focusLost(FocusEvent arg0) {
                tblTarget.setBackground(new Color(255, 255, 255));
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JScrollPane scMain;
    private javax.swing.JScrollPane scOption;
    private javax.swing.JTable tblMain;
    private javax.swing.JTable tblOption;
    private javax.swing.JTextField txtBad;
    private javax.swing.JFormattedTextField txtDate;
    private javax.swing.JTextField txtGood;
    private javax.swing.JTextField txtIDNo;
    private javax.swing.JTextField txtInvoiceAmount;
    private javax.swing.JFormattedTextField txtInvoiceDate;
    public javax.swing.JTextField txtInvoiceNo;
    private javax.swing.JTextField txtItemID;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtQnty;
    private javax.swing.JTextField txtReck;
    private javax.swing.JTextField txtSAPCode;
    // End of variables declaration//GEN-END:variables
}
